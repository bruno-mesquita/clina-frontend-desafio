import { useState } from 'react';
import type { FC } from 'react';
import type { NextPage, GetServerSideProps } from 'next';
import Head from 'next/head';
import Router from 'next/router';
import {
  Text,
  Flex,
  FormControl,
  Select,
  FormLabel,
  Button,
  useToast,
} from '@chakra-ui/react';
import { MdChevronLeft } from 'react-icons/md';
import nookies from 'nookies';
import api from '@services/api';

import { Header, EndBookingCard } from '@components';

const days = [
  {
    id: 1,
    day: '02',
    month: 'março',
    periods: [
      { title: 'Manhã', hours: ['8:00 as 9:00', '9:00 as 10:00'] },
      { title: 'Tarde', hours: ['12:00 as 13:00', '13:00 as 14:00'] },
    ],
  },
  {
    id: 2,
    day: '02',
    month: 'abril',
    periods: [
      { title: 'Manhã', hours: ['10:00 as 11:00', '11:00 as 12:00'] },
      { title: 'Tarde', hours: ['14:00 as 15:00', '15:00 as 16:00'] },
    ],
  },
];

const HourItem: FC<{ isSelected: boolean; onClick: () => void }> = ({
  children,
  isSelected = false,
  onClick,
}) => {
  const colorSecondary = isSelected ? '#7A35FF' : '#fff';
  const colorPrimary = isSelected ? '#fff' : '#7A35FF';

  return (
    <Flex
      onClick={onClick}
      cursor="pointer"
      transition="background 0.2s"
      _hover={{ bg: colorPrimary }}
      mr="20px"
      bg={colorSecondary}
      rounded="5px"
      shadow="xs"
      p="10px"
    >
      <Text
        color={isSelected ? '#fff' : '#000'}
        _hover={{ color: isSelected ? '#7A35FF' : '#fff' }}
        px="20px"
      >
        {children}
      </Text>
    </Flex>
  );
};

const DetailRoom: NextPage = () => {
  const toast = useToast({ position: 'top-right' });

  const [period, setPeriod] = useState('Todos');
  const [loading, setLoading] = useState(false);

  const [itemsSelecteds, setItemsSelecteds] = useState<string[]>([]);

  const onChangeItems = (item: string) => {
    const index = itemsSelecteds.findIndex((e) => e === item);

    if (index === -1) setItemsSelecteds((old) => [...old, item]);
    else setItemsSelecteds((old) => old.filter((e) => e !== item));
  };

  const onSubmit = () => {
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      toast({ title: 'Sucesso!', description: 'Reserva feita com sucesso' });
    }, 2000);
  };

  return (
    <Flex flexDir="column" h="100%">
      <Head>
        <title>Clina Care</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Flex
        bg="#FAFAFA"
        justify="space-between"
        align="center"
        px={['20px', '20px', '50px', '80px']}
        h="100%"
        pt="20px"
      >
        <Flex flexDir="column" h="100%">
          <Flex align="center">
            <Flex
              onClick={() => Router.back()}
              cursor="pointer"
              align="center"
              justify="center"
              rounded="50%"
              border="0.5px solid #4F4F4F"
              mr="10px"
            >
              <MdChevronLeft size={20} />
            </Flex>
            <Text fontWeight={600} fontSize="22px">
              Horários disponíveis para escolher
            </Text>
          </Flex>
          <Flex w={['xl', 'md']} justify="space-between" my="20px">
            <FormControl w="45%" isDisabled>
              <FormLabel color="#4F4F4F" fontWeight={600}>
                Dia(s) escolhido(s)
              </FormLabel>
              <Select
                rounded="3px"
                variant="outline"
                value={period}
                onChange={({ target }) => setPeriod(target.value)}
              >
                <option value="2022/02/08">2022/02/08</option>
                <option value="2022/02/09">2022/02/09</option>
                <option value="2022/02/10">2022/02/10</option>
                <option value="2022/02/11">2022/02/11</option>
                <option value="2022/02/12">2022/02/12</option>
              </Select>
            </FormControl>
            <FormControl w="40%" isDisabled>
              <FormLabel color="#4F4F4F" fontWeight={600}>
                Período do dia
              </FormLabel>
              <Select
                rounded="3px"
                variant="outline"
                value={period}
                onChange={({ target }) => setPeriod(target.value)}
              >
                <option value="Manhã">Manhã</option>
                <option value="Tarde">Tarde</option>
                <option value="Noite">Noite</option>
                <option value="Todos">Todos</option>
              </Select>
            </FormControl>
          </Flex>
          {days.map((day) => (
            <Flex key={day.id} flexDir="column" mt="20px">
              <Flex fontWeight={600} fontSize="18px">
                <Text color="#7A35FF">{day.day}</Text>
                <Text ml="10px">{day.month}</Text>
              </Flex>

              {day.periods.map((period) => (
                <>
                  <Text color="#4F4F4F" my="10px">
                    No periodo <strong>{period.title}</strong>
                  </Text>
                  <Flex>
                    {period.hours.map((hour) => (
                      <HourItem
                        isSelected={!!itemsSelecteds.find((e) => e === hour)}
                        onClick={() => onChangeItems(hour)}
                        key={hour}
                      >
                        {hour}
                      </HourItem>
                    ))}
                  </Flex>
                </>
              ))}
            </Flex>
          ))}
        </Flex>
        <EndBookingCard onSubmit={onSubmit} loading={loading} />
      </Flex>
    </Flex>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  // Parse
  const cookies = nookies.get(ctx);

  if (cookies.token) {
    api.defaults.headers.common.Authorization = cookies.token;

    return {
      props: {},
    };
  }

  return {
    redirect: {
      destination: '/auth',
      permanent: true,
    },
  };
};

export default DetailRoom;
